#!/bin/bash

usage="Run coverage analyses and send it to Codecov."

# Setup
#######
set -euC
root="$(cd "$(dirname "$0")/.." && pwd | sed s,/Teamwork/,/teamwork/,)"
. "$root/bin/start"

# Run action
############

# Find all packages that depend on this package. We can pass this to -coverpkg
# so that lines in these packages are counted as well.
find_deps() {
	(
		echo "$1"
		go list $test_tags -f $'{{range $f := .Deps}}{{$f}}\n{{end}}' "$1"
		go list $test_tags -f $'{{range $f := .TestImports}}{{$f}}\n{{end}}' "$1" |
			while read imp; do
				go list $test_tags -f $'{{range $f := .Deps}}{{$f}}\n{{end}}' "$imp";
			done
	) | sort -u | grep ^$pkgname | grep -Ev "^$pkgname/(vendor|test)" |
		tr '\n' ' ' | sed 's/ $//' | tr ' ' ','
}

echo 'mode: atomic' >| coverage.txt

test_pkgs=$(find -name "*_test.go" |
	grep -v /vendor/ |
	xargs dirname |
	sort -u |
	sed -e "s#^\.#$pkgname#")

# Cache
go test -i -cover -covermode=set $test_tags $(go list ./... | grep -v /vendor/)

for pkg in $test_pkgs; do
	go test \
		$test_tags \
		-coverprofile=profile.out \
		-covermode=set \
		-coverpkg=$(find_deps "$pkg") \
		$pkg 2>&1 | grep -v 'warning: no packages being tested depend on '

	if [ -f profile.out ]; then
		tail -n+2 profile.out >> coverage.txt
		rm profile.out
	fi
done

if [ -z "${codecov_token:-}" ]; then
	echo "codecov_token not set; cannot submit coverage results"
	exit 0
fi

if [ -n ${TRAVIS:-} ]; then
	bash <(curl -s https://codecov.io/bash) -t $codecov_token
else
	bash <(curl -s https://codecov.io/bash) \
		-t $codecov_token
		-B $(git rev-parse --abbrev-ref HEAD) \
		-C $(git rev-parse HEAD)
fi
